<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="microphone" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="4294967295">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="4294967295">
        <Object accept_root="1" aspect="1" at="0 0 0" at_dir="0" base_name="Default" far="512" fov="1.0472" from="2.40998 2.99743 3.99625" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="4294967295">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="4294967295">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')
	
	
	# config
	VR.doEcho = True
	VR.doSim = False
	VR.doStream = not VR.doEcho
	VR.useTurnServer = False
	VR.serverAddr = '0.0.0.0'
	
	
	# init modules
	VR.mike = VR.Microphone()
	
	VR.indicator = VR.Geometry('indicator')
	VR.indicator.setPrimitive('Sphere 1 3')
	VR.scene.addChild(VR.indicator)
	
	if VR.doSim: VR.mike.simSource(1, 440, 0.2, 0.8)
	
	if VR.doStream: VR.listenStream()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="listenStream" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	VR.inStream = VR.Sound()
	#VR.inStream.setBandpass(0.25, 0.25) # basic noise reduction
	
	if VR.useTurnServer:
		VR.clientIn = VR.UDPClient()
		VR.clientIn.connect(VR.serverAddr, 4044)
		VR.clientIn.send('hi')
		VR.inStream.playPeerStream(VR.clientIn)
	else:
		VR.inStream.listenStream(1234)
	#print 'listenStream', VR.clientIn.connected()
</core>
    </Script>
    <Script base_name="record" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if not hasattr(VR, 'toggle'): 
		VR.toggle = False
		
		if VR.useTurnServer:
			VR.clientOut = VR.UDPClient()
			VR.clientOut.connect(VR.serverAddr, 4045)
			VR.mike.startStreamingOver(VR.clientOut)
		else:
			VR.mike.startStreaming(VR.serverAddr, 1234)
		
		VR.mike.pauseStreaming(True)
		#print 'setupMikeStream', VR.clientOut.connected()
		
	pressed = dev.getState()
	if VR.toggle == pressed: return
	if hasattr(VR, 'recording'):
		if VR.recording and VR.recording.isRunning(): return
	VR.toggle = pressed
	
	def setIndicator(c):
		VR.indicator.setColor(c)
		
	def onStopped():
		print 'stopped'
		setIndicator('#fff')

	if VR.toggle:
		print 'record'
		if VR.doStream: VR.mike.pauseStreaming(False)
		if VR.doEcho: VR.mike.startRecording()
		setIndicator('#f00')
		
	else:
		if VR.doStream:
			print 'stop'
			VR.mike.pauseStreaming(True)
			VR.mike.stopStreaming()
			setIndicator('#fff')
	
		if VR.doEcho:
			print 'play'
			VR.recording = VR.mike.stopRecording()
			#VR.recording.exportToFile('test.mp3')
			#VR.recording.streamTo('127.0.0.1', 1234, 0)
			VR.recording.setCallback(onStopped)
			VR.recording.play()
			setIndicator('#0af')
		
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="32" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
      <trig type="on_device" dev="keyboard" state="Released" param="" key="32" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
    <Script base_name="stream" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	# stream recorded audio
	VR.recording.streamTo(VR.serverAddr, 1234, 0)
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
