<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="pipes" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="4294967295">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="4294967295">
        <Object accept_root="1" aspect="1" at="-0.478595 0.15486 0.358613" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-1.43262 1.0925 0.191051" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="4294967295">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="4294967295">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="clickTool" group="tools" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if dev.intersect(VR.hud): return

	if dev.intersect(VR.environment):
		i = dev.getIntersected()
		print i, i.hasTag('switch'), i.getName(), i.getTags()
		if i.hasTag('switch'):
			i.makeUnique()
			d = i.getMaterial().getDiffuse()
			isOn = bool(d[1] &gt; 0.5)
			
			m = VR.Material('tmp')
			i.setMaterial(m)
			
			if isOn: m.setDiffuse([1,0,0])
			else: m.setDiffuse([0,1,0])
			isOn = not isOn
		
			part = i.hasAncestorWithTag('part')
			nID = int(part.getTagValue('simNode'))
			n = VR.sim.getNodeName(nID)
			
			if 'pump' in n:
				if isOn: VR.sim.setPump(n, 50.0)
				else: VR.sim.setPump(n, 0.0)
				
			if 'valve' in n:
				if isOn: VR.sim.setValve(n, 1)
				else: VR.sim.setValve(n, 0)

	ghost = None
	if hasattr(VR, 'toolGhost'): ghost = VR.toolGhost
	
	if ghost and ghost.isVisible():
		pose = ghost.getPose()
		template = ghost.getChild(0).getChild(0)
		asset = template.duplicate()
		asset.setPose(pose)
		asset.addTag('part')
		VR.environment.addChild(asset)
		
		nID = -1
		n = asset.getName()
		if 'tank' in n: nID = VR.sim.addNode(n, pose, 'Tank', {'pressure':1.0, 'volume':1.0, 'density':1.0})
		if 'pump' in n: nID = VR.sim.addNode(n, pose, 'Pump', {'performance':0.0, 'isOpen':0})
		if 'valve' in n: nID = VR.sim.addNode(n, pose, 'Valve', {'state':0, 'radius':0.01})
		if nID &gt;= 0: asset.setTagValue('simNode', str(nID))
		
	if VR.toDelete:
		if VR.toDelete.hasTag('simNode'):
			nID = int(VR.toDelete.getTagValue('simNode'))
			VR.sim.remNode(nID)
		if VR.toDelete.hasTag('simPipe'):
			eID = int(VR.toDelete.getTagValue('simPipe'))
			VR.sim.remSegment(eID)
		VR.toDelete.destroy()
		VR.toDelete = None
		
	if not hasattr(VR, 'firstAnchor'): VR.firstAnchor = None
	if VR.closestAnchor:
		if not VR.firstAnchor: VR.firstAnchor = VR.closestAnchor
		else: 
			VR.createPipe(VR.firstAnchor, VR.closestAnchor)
			VR.firstAnchor = None
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
    <Script base_name="createPipe" group="assets" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR, math

	part1 = anchor1.hasAncestorWithTag('part')
	part2 = anchor2.hasAncestorWithTag('part')
	if part1 == part2: return
	
	p1 = anchor1.getWorldPose()
	p2 = anchor2.getWorldPose()
	
	p1.setDir(-p1.dir())
	
	p = VR.Path()
	p.addPoint2(p1)
	p.addPoint2(p2)
	p.compute(18)
	
	R = 0.01
	N = 16
	prof = []
	for i in range(N):
		a = 2.0*math.pi*float(i)/(N-1)
		c = math.cos(a)
		s = math.sin(a)
		prof.append([c*R,s*R,0])
	
	s = VR.Stroke()
	s.setPath(p)
	s.strokeProfile(prof, 1, 1, 0)
	s.addTag('pipe')
	VR.environment.addChild(s)

	nID1 = int(part1.getTagValue('simNode'))
	nID2 = int(part2.getTagValue('simNode'))
	eID = VR.sim.addSegment(R, nID1, nID2)
	s.setTagValue('simPipe', str(eID))
</core>
      <arg type="NoneType" value="None" base_name="anchor1" name_space="createPipe" name_suffix="0" persistency="666"/>
      <arg type="NoneType" value="None" base_name="anchor2" name_space="createPipe" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="hudHandler" group="ui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

 	m = dev.getMessage().split('|')
 	
 	if m[0] == 'tool': VR.selectTool(m[1])
 	
</core>
      <trig type="on_device" dev="server1" state="Released" param="0" key="-1" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="hudSite" group="ui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="HTML">
      <core>
&lt;!DOCTYPE html&gt;
 &lt;html&gt;

 &lt;head&gt;
 	&lt;style type="text/css"&gt;
 		body {
 			margin: 0;
 			display: flex;
 			justify-content: space-evenly;
 			overflow: hidden;
 		}
 		
 		button {
 			font-size:50vh;
 			width: 100%;
 			height:100vh;
 		}
 		
 		.selected {
 			background: #fff;
 		}
 	&lt;/style&gt;
 	&lt;script&gt;
 		var websocket = new WebSocket('ws://localhost:5500');
 		websocket.onopen = function() { send('register|hud'); };
 		websocket.onerror = function(e) {};
 		websocket.onmessage = function(m) { if(m.data) handle(m.data); };
 		websocket.onclose = function(e) {};

 		function send(m) { websocket.send(m); };
 		function handle(m) { console.log(m); };
 		
 		var selected = undefined;
 		function select(button) {
 			if (selected != undefined) selected.className = '';
 			if (selected == button) {
 				send('tool|None');
 				selected = undefined;
 				return;
 			}
 			selected = button;
 			button.className = 'selected';
 			send('tool|'+button.innerHTML)
 		};
 	&lt;/script&gt;
 &lt;/head&gt;

 &lt;body&gt;
 	&lt;button onclick="select(this)"&gt;Tank&lt;/button&gt;
 	&lt;button onclick="select(this)"&gt;Pump&lt;/button&gt;
 	&lt;button onclick="select(this)"&gt;Pipe&lt;/button&gt;
 	&lt;button onclick="select(this)"&gt;Valve&lt;/button&gt;
 	&lt;button onclick="select(this)"&gt;Gauge&lt;/button&gt;
 	&lt;button onclick="select(this)"&gt;Delete&lt;/button&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</core>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')

	
	VR.setupMaterials()
	VR.setupUI()
	VR.setupEnvironment()
	VR.setupAssets()
	
	VR.sim = VR.PipeSystem()
	VR.sim.setDoVisual(True, 0.02)
	VR.scene.addChild(VR.sim)
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="selectTool" group="tools" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.activeTool = tool

	if hasattr(VR, 'toolGhost'): 
		if VR.toolGhost: VR.toolGhost.destroy()
		VR.toolGhost = None
		
	def createGhost(template):
		m = VR.materials['ghost'].duplicate()
		VR.toolGhost = VR.Transform('toolGhost')
		VR.toolGhost.addChild(m)
		m.addChild(template.duplicate())
		VR.scene.addChild(VR.toolGhost)
		
	if tool == 'Tank': createGhost(VR.tankPrototype)
	if tool == 'Pump': createGhost(VR.pumpPrototype)
	if tool == 'Valve': createGhost(VR.valvePrototype)
	if tool == 'Gauge': createGhost(VR.gaugePrototype)
	
	if tool == 'Pipe': VR.materials['anchor'].clearTransparency()
	else: 
		VR.materials['anchor'].setTransparency(0)
		VR.firstAnchor = None
		if VR.closestAnchor:
			VR.closestAnchor.switchParent(VR.closestAnchor.getParent().getParent())
			VR.closestAnchor = None
	
</core>
      <arg type="NoneType" value="None" base_name="tool" name_space="selectTool" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="setupAssets" group="assets" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

		
	VR.pumpPrototype = VR.Transform('pump')
	c1 = VR.createPrimitive('core1', 'Pill 0.22 0.09', VR.pumpPrototype, VR.materials['metal'])
	c2 = VR.createPrimitive('core2', 'Box 0.2 0.2 0.2', VR.pumpPrototype, VR.materials['metal'])
	c1.setTransform([0,0.1,0], [0,1,0], [0,0,1])
	c2.setTransform([0,0.1,0])

	VR.tankPrototype = VR.Transform('tank')
	c = VR.createPrimitive('core', 'Pill 0.22 0.09', VR.tankPrototype, VR.materials['metal'])
	c.setTransform([0,0.2,0])
	
	VR.valvePrototype = VR.Transform('valve')
	c = VR.createPrimitive('core', 'Cylinder 0.05 0.1 32', VR.valvePrototype, VR.materials['metal'])
	c.setTransform([0,0.2,0], [0,1,0], [0,0,1])
	
	VR.gaugePrototype = VR.Transform('gauge')
	c = VR.createPrimitive('core', 'Cylinder 0.05 0.1 32', VR.gaugePrototype, VR.materials['gauge'])
	c.setTransform([0,0.2,0], [0,1,0], [0,0,1])
	
	
	def addSwitch(parent, pose):
		b = VR.createPrimitive('switch', 'Cylinder 0.02 0.02 32', parent, VR.materials['switch'])
		b.setPose(pose)
		b.addTag('switch')
		
	addSwitch(VR.pumpPrototype, VR.Pose([0.05, 0.2, 0.05]))
	addSwitch(VR.valvePrototype, VR.Pose([0, 0.3, 0]))
	

	if hasattr(VR, 'anchor'): VR.anchor.destroy()
	VR.anchor = VR.createPrimitive('anchor', 'Gear 0.01 0.04 0.05 11 0.04 0.2', None, VR.materials['anchor'])
	
	def addAnchor(parent, pose):
		a = VR.anchor.duplicate()
		a.setPose(pose)
		a.addTag('anchor')
		s = 0.2
		a.setScale([s,s,s])
		parent.addChild(a)

	addAnchor(VR.tankPrototype, VR.Pose([0,0.2,0.09]))
	addAnchor(VR.tankPrototype, VR.Pose([0,0.2,-0.09], [0,0,1]))
	addAnchor(VR.tankPrototype, VR.Pose([0.09,0.2,0], [-1,0,0]))
	addAnchor(VR.tankPrototype, VR.Pose([-0.09,0.2,0], [1,0,0]))
	addAnchor(VR.tankPrototype, VR.Pose([0,0.0,0], [0,1,0], [0,0,1]))
	addAnchor(VR.tankPrototype, VR.Pose([0,0.4,0], [0,-1,0], [0,0,1]))

	addAnchor(VR.pumpPrototype, VR.Pose([0.1,0.1,0], [-1,0,0]))
	addAnchor(VR.pumpPrototype, VR.Pose([-0.1,0.1,0], [1,0,0]))
	addAnchor(VR.pumpPrototype, VR.Pose([0,0.0,0], [0,1,0], [0,0,1]))
	addAnchor(VR.pumpPrototype, VR.Pose([0,0.2,0], [0,-1,0], [0,0,1]))

	addAnchor(VR.valvePrototype, VR.Pose([0,0.2, 0.025], [0,0,-1]))
	addAnchor(VR.valvePrototype, VR.Pose([0,0.2,-0.025], [0,0, 1]))
</core>
    </Script>
    <Script base_name="setupEnvironment" group="assets" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if hasattr(VR, 'environment'): VR.environment.destroy()
	VR.environment = VR.Object('environment')
	VR.scene.addChild(VR.environment)
	
	W = 20
	Ws = str(W)
	Ns = str(W/4)

	floor = VR.Geometry('floor')
	floor.setPrimitive('Plane '+Ws+' '+Ws+' '+Ns+' '+Ns)
	floor.setOrientation([0,1,0], [0,0,-1])
	floor.applyTransformation()
	floor.setMaterial(VR.materials['floor'])
	cols = [[0,0,0]]*floor.size()
	for i,p in enumerate(floor.getPositions()):
		g = abs(p.length()/W*6-1.8)
		g = min(g*g,1.0)
		cols[i] = [g,g,g]
		
	floor.setColors(cols)
	VR.environment.addChild(floor)
	
	floor2 = floor.duplicate()
	floor2.setScale([0.15,0.15,0.15])
	VR.environment.addChild(floor2)
</core>
    </Script>
    <Script base_name="setupMaterials" group="assets" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if not hasattr(VR, 'materials'): VR.materials = {}
	
	def getMat(name):
		if not name in VR.materials: VR.materials[name] = VR.Material(name)
		return VR.materials[name]
	
	gaugeMat = getMat('gauge')
	gaugeMat.setDiffuse([0.8,0.8,0.8])
	
	pipeMat = getMat('pipe')
	pipeMat.setDiffuse([0.4,0.4,0.4])
	
	metalMat = getMat('metal')
	metalMat.setDiffuse([0.5,0.5,0.5])

	deleteMat = getMat('delete')
	deleteMat.setActivePass(0)
	deleteMat.setDiffuse([1.0,0.2,0])
	deleteMat.setTransparency(0.7)
	deleteMat.setFrontBackModes('GL_NONE', 'GL_FILL')
	deleteMat.setActivePass(1)
	deleteMat.setDiffuse([1.0,0.2,0])
	deleteMat.setTransparency(0.7)
	deleteMat.setFrontBackModes('GL_FILL', 'GL_NONE')
	
	anchorMat = getMat('anchor')
	anchorMat.setDiffuse([1,1,1])
	anchorMat.setTransparency(0)
	
	closestAnchorMat = getMat('closestAnchor')
	closestAnchorMat.setDiffuse([0,1,1])
	
	switchMat = getMat('switch')
	switchMat.setDiffuse([1,0,0])
	
	floorMat = getMat('floor')
	floorMat.setDiffuse([0.2,0.2,0.2])
	floorMat.setWireFrame(1)
	floorMat.setLineWidth(2)
	floorMat.setLit(0)


	ghostMat = getMat('ghost')
	ghostMat.setActivePass(0)
	ghostMat.setDiffuse([0.2,0.8,1.0])
	ghostMat.setTransparency(0.5)
	ghostMat.setFrontBackModes('GL_NONE', 'GL_FILL')
	ghostMat.setActivePass(1)
	ghostMat.setDiffuse([0.2,0.8,1.0])
	ghostMat.setTransparency(0.5)
	ghostMat.setFrontBackModes('GL_FILL', 'GL_NONE')
</core>
    </Script>
    <Script base_name="setupUI" group="ui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

 	def addHud(site,w,h,x,y,parent):
 		s = VR.Sprite('site')
 		s.setSize(w,h)
 		s.webOpen('http://localhost:5500/'+site, 400, w/h)
 		s.setFrom([x,y,-2])
 		parent.addChild(s)

 	if hasattr(VR, 'hud'): VR.hud.destroy()
 	VR.hud = VR.Object('hud')
 	VR.find('Default').addChild(VR.hud)

 	addHud( 'hudSite', 1.0,0.1, 0,1, VR.hud )
</core>
    </Script>
    <Script base_name="updateTool" group="tools" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	mouse = VR.find('mouse')
	
	intersected = None
	intersection = None
	if mouse.intersect(VR.environment):
		intersected = mouse.getIntersected()
		intersection = mouse.getIntersection()

	ghost = None
	if hasattr(VR, 'toolGhost'): ghost = VR.toolGhost
	
	if ghost: ghost.setVisible(intersected != None)
	
	if intersection and ghost:
		ghost.setFrom(intersection)
		
	part = None
	if intersected: part = intersected.hasAncestorWithTag('part')
	
	pipe = None
	if intersected: pipe = intersected.hasAncestorWithTag('pipe')
		
	if not hasattr(VR, 'toDelete'): VR.toDelete = None
	if (part or pipe) and VR.activeTool == 'Delete':
		obj = part
		if pipe: obj = pipe
		if obj != VR.toDelete:
			if VR.toDelete: VR.toDelete.switchParent(VR.environment)
			m = VR.materials['delete']
			m.switchParent(VR.environment)
			obj.switchParent(m)
			VR.toDelete = obj
	elif VR.toDelete:
		VR.toDelete.switchParent(VR.environment)
		VR.toDelete = None
		
	def getClosestAnchor(part, pos):
		dmin = 1e6
		amin = None
		anchors = part.findAll('anchor')
		for a in anchors:
			ap = a.getWorldFrom()
			d = ap.distance(pos)
			if d &lt; dmin:
				dmin = d
				amin = a
		return amin
		
	if not hasattr(VR, 'closestAnchor'): VR.closestAnchor = None
	if part and VR.activeTool == 'Pipe':
		a = getClosestAnchor(part, intersection)
		if a != VR.closestAnchor:
			if VR.closestAnchor: VR.closestAnchor.switchParent(VR.closestAnchor.getParent().getParent())
			VR.closestAnchor = a
			m = VR.materials['closestAnchor']
			m.switchParent(a.getParent())
			a.switchParent(m)
	elif VR.closestAnchor:
		VR.closestAnchor.switchParent(VR.closestAnchor.getParent().getParent())
		VR.closestAnchor = None
		
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="1 1 1" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
