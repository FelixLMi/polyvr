<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="mecha_test" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="1" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1.79769e+308 1.79769e+308 1.79769e+308 -1.79769e+308 -1.79769e+308 -1.79769e+308 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="0.245364 -0.0381768 0.010066" at_dir="0" base_name="Default" camType="perspective" far="250" fov="1.0472" from="1.14651 0.316584 -0.352238" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="Script" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR


	VR.P2.show()
	m = VR.P2.getMaterial()
	"""
	m.setDepthTest('GL_NONE')
	m.clearTransparency()
	m.setFrontBackModes('GL_FILL', 'GL_NONE')
	m.setZOffset(0,0)
	m.setSortKey(0)
	"""
	
	g = VR.loadGeometry('robotArm.dae')
	VR.gears.addChild(g)
</core>
    </Script>
    <Script base_name="addGear" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	p = VR.Geometry(params[0])
	s = ' '.join([str(i) for i in params])
	p.setPrimitive( s )
	p.setPickable(True)
	p.getConstraint().setRotationConstraint([0,0,1], 'LINE', 1)
	VR.gears.addChild(p)
	VR.mechanism.add(p)
	p.setPose(pose)
	p.addTag('gear')
	
</core>
      <arg type="NoneType" value="None" base_name="params" name_space="addGear" name_suffix="0" persistency="666"/>
      <arg type="NoneType" value="None" base_name="pose" name_space="addGear" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="click" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	from VR.Math import Vec3
	import math
	
	if not hasattr(VR, 'selector'):
		VR.selector = VR.Selector()
	
	if dev.intersect():
		i = dev.getIntersected()
		a = i.hasAncestorWithTag('gear')
		
		print i.getName()
		
		if VR.tool == 'select' and a:
			kb = VR.find('keyboard')
			if kb.getKeyState(65507) == 1:
				VR.selector.getSelection().add(i)
				VR.selector.update()
			else: VR.selector.select(i)
			return
		
		if VR.tool == 'remove' and a:
			a.destroy()
			return
			
			
		if VR.tool == 'rotate' and a:
			d = a.getDir()
			p = a.getFrom()
			a.setConstraint(VR.Constraint())
			a.applyChange()
			if   abs(d[0]) &gt; 0.5: a.setTransform(p,[0,1,0],[0,0,1])
			elif abs(d[1]) &gt; 0.5: a.setTransform(p,[0,0,1],[0,1,0])
			elif abs(d[2]) &gt; 0.5: a.setTransform(p,[1,0,0],[0,1,0])
			print a.getDir()
			a.applyChange()
			#a.getConstraint().setRotationConstraint(a.getDir(), 'LINE', 1)
			return
		
		if i == VR.P1:
			VR.rotate = not VR.rotate # toggle state
			
		if i == VR.P4:
			VR.block = not VR.block # toggle state
			pb = [VR.cgr,VR.cgr*math.sqrt(3), 0]
			pub = [VR.cgr,VR.cgr*math.sqrt(3), -0.1]	
			if VR.block: VR.P4.setFrom(pb)
			else: VR.P4.setFrom(pub)
		return
			
			
	if VR.tool == 'gear':
		params = ['Gear', 0.02, 0.01, 0.02, 32, 0.01, 0]
		pose = dev.getBeacon().getWorldPose()
		pos = pose.pos() + pose.dir()
		VR.addGear(params, VR.Pose(pos,[0,0,-1],[0,1,0]))
		
		
		
		
	
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
    <Script base_name="gui_handler_toolbar" group="gui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR, os
	m = dev.getMessage()
	
	mv = m.split(' ')
	m = mv[0]
		
	if m == 'tool':
		VR.tool = None
		if len(mv) == 2: VR.tool = mv[1]
		pass
		
	if m == 'chain':
		s = VR.selector.getSelection()
		objs = s.getSelected()
		
		c = VR.mechanism.addChain(0.02, objs, 'l'*len(objs))
		VR.gears.addChild(c)
</core>
      <trig type="on_device" dev="server1" state="Released" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
    <Script base_name="gui_init" group="gui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'gui'): VR.gui.destroy()
	
	cam = VR.find('Default')
	VR.gui = VR.Transform('gui')
	VR.gui.setTransform([0,-1.5,-3], [0,0,1], [0,-1,0])
	#root.addChild(VR.gui)
	cam.addChild(VR.gui)
	
	toolbar = VR.Sprite('gui')
	S = 2
	toolbar.setSize(S,S*0.1)
	toolbar.setFrom([0,-2.9,0])
	toolbar.webOpen('http://localhost:5500/gui_site_toolbar', 600, 10)
	VR.gui.addChild(toolbar)
	
	m = toolbar.getMaterial()
	m.clearTransparency()
	m.setDepthTest('GL_ALWAYS')
	
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
    </Script>
    <Script base_name="gui_site_toolbar" group="gui" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="HTML">
      <core>
&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
 &lt;style type="text/css"&gt;
  body {font-size:5vw;
		text-align:center;
		background:#ffffff;
		color:#555555;
		margin:0;
  }
		
  button {font-size:100%;}
  input {font-size:100%;}
  
  #bar {
	display: flex;
	flex-direction: row;
	flex-wrap: no-wrap;
	align-items: center;
	justify-content: space-around;
	width: 100vw;
	height: 100vh;
  }
  
	#ck-button {
		background-color:#EFEFEF;
		border-radius:4px;
		border:1px solid #D0D0D0;
		overflow:auto;
		float:left;
	}

	#ck-button:hover {
		background:#bbf;
	}

	#ck-button label {
		float:left;
		width:70vh;
	}

	#ck-button label i {
		text-align:center;
		padding:3px 0px;
		display:block;
	}

	#ck-button label input {
		position:absolute;
		top:-20px;
	}

	#ck-button input:checked + i {
		background-color:#88d;
		color:#fff;
	}
 &lt;/style&gt;
 &lt;link rel="stylesheet" href="font-awesome-4.5.0/css/font-awesome.min.css"&gt;

  &lt;script&gt;
	var lastTool = '';
	
	function tool(cb, type) {
		if (lastTool != '' &amp;&amp; cb != lastTool) lastTool.checked = false;
		if (cb.checked) send('tool '+type);
		else send('tool');
		lastTool = cb;
	}
  
	function handle(m) {
		data = m.split(" ");
		if (data.length &gt; 0) {
			if (data[0] == "catalog") {
				clear_catalog();
				for (i=1; i&lt;data.length; i++) add_tile(data[i]);
			}
		}
	}; 
	
	var websocket = new WebSocket('ws://'+location.hostname+':5500');
	websocket.onmessage = function(m) { if (m.data) handle(m.data); };	
	function send(m){ websocket.send(m); };
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;


&lt;body&gt;
    &lt;div id="bar"&gt;
		&lt;div id="ck-button"&gt;
		   &lt;label&gt;
			  &lt;input class="TB" type="checkbox" onclick="tool(this,'select')" value="1"&gt;
			  &lt;i class="fa fa-hand-pointer-o"&gt;&lt;/i&gt;
		   &lt;/label&gt;
		&lt;/div&gt;
		&lt;div id="ck-button"&gt;
		   &lt;label&gt;
			  &lt;input class="TB" type="checkbox" onclick="tool(this,'gear')" value="1"&gt;
			  &lt;i class="fa fa-gear"&gt;&lt;/i&gt;
		   &lt;/label&gt;
		&lt;/div&gt;
		  &lt;button onclick="send('chain')"&gt;&lt;i class="fa fa-chain"&gt;&lt;/i&gt;&lt;/button&gt;
		&lt;div id="ck-button"&gt;
		   &lt;label&gt;
			  &lt;input class="TB" type="checkbox" onclick="tool(this,'rotate')" value="1"&gt;
			  &lt;i class="fa fa-rotate-left"&gt;&lt;/i&gt;
		   &lt;/label&gt;
		&lt;/div&gt;
		&lt;div id="ck-button"&gt;
		   &lt;label&gt;
			  &lt;input class="TB" type="checkbox" onclick="tool(this,'remove')" value="1"&gt;
			  &lt;i class="fa fa-remove"&gt;&lt;/i&gt;
		   &lt;/label&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import math
	import string
	from VR.Math import Vec3
	
	VR.tool = None
	VR.rotate = 1
	VR.block = 0
	PI = 3.14159265359
	
	# root node and reset
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Transform('scene', 'Headlight')
	
	if hasattr(VR, 'mechanism'): VR.mechanism.clear()
	else: VR.mechanism = VR.Mechanism()
	VR.scene.addChild(VR.mechanism)
	
	if hasattr(VR, 'kinematics'): VR.kinematics.clear()
	else: VR.kinematics = VR.Kinematics()
	
	VR.gears = []
	
	# primitives
	def addGear(params, mecha, Nt):
		p = VR.Geometry(params[0])
		s = string.join([str(i) for i in params])
		p.setPrimitive( s )
		p.setPickable(True)
		#p.getConstraint().setRotationConstraint([0,0,-1], 'LINE', 1)
		VR.scene.addChild(p)
		p.addTag('gear')
		VR.gears.append(p)
		#if mecha: VR.mechanism.add(p)
		#if mecha: VR.mechanism.addGear(p, 0.02, 0.01, 0.02, Nt, 0.01, 0, [0,0,-1])
		return p
		
	# parameters
	cfr = 1 # cyberfloor radius
	gp = 0.02 # gear pitch
	bgp = 0.01 # bevel gear pitch
	agN = 12 # auxilliary gear teeth N 
	cgN = 32 # chain gear teeth N 
	ar = 0.01 # axle radius
	
	cgr = gp*cgN*0.5/math.pi # chain gear radius
	VR.cgr = cgr
	
	VR.testChangeComputationGears = []
	
	def addGearPair(pos, d):
		p1 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
		p2 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
		p3 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
		p1.setColor('blue')
		p1.translate(pos)
		p2.translate(pos+d*cgr*2)
		p3.translate(pos-d*cgr*2)
		VR.testChangeComputationGears.append(p1)
		return p1
	
	addGearPair(Vec3([0,1.5,0]), Vec3([1,0,0]))
	p = addGearPair(Vec3([0,1.5,0.2]), Vec3([1,0,0]))
	p.rotate(PI, [0,1,0])
		
	# pads
	VR.P1 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P2 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P3 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P4 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P5 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P6 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P7 = addGear(['Gear', 0.02, ar, gp, 16, 0.01, 0], True, 16)
	VR.P8 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P9 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P2.translate([cgr*2,0,0])
	VR.P2.rotate(3.14, [0,1,0])
	VR.P3.translate([cgr*4,0,0])
	VR.P4.translate([cgr,cgr*math.sqrt(3), -0.1]) # block wheel
	VR.P5.translate([cgr*2,-cgr*2,0])
	VR.P6.translate([cgr*3,-cgr*2,-cgr])
	VR.P6.rotate(-3.14*0.5, [0,1,0])
	VR.P7.translate([cgr*8,0,0.2])
	VR.P8.translate([cgr*4,0,0.2])
	VR.P9.translate([cgr*8,cgr*3,0.2])
	VR.P7.rotate(3.14, [0,1,0])
	
	# test 
	VR.P1.rotate(3.14, [0,1,0])
	
	P22 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	P22.translate([cgr*2,0,0.2])
	
	for gear in VR.gears: VR.mechanism.add(gear)
	
	c = VR.mechanism.addChain(0.02, [VR.P7, VR.P8, VR.P9], 'lll')
	VR.scene.addChild(c)
	
	VR.P1.setColor('blue')
	VR.P4.setColor('red')
	
	VR.P1.setPickable(0)
	VR.P4.setPickable(0)
	
	if 0: # lever example
		VR.PL1 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
		VR.PL2 = addGear(['Gear', 0.02, ar, gp, int(0.2*cgN), 0.01, 0], True, int(0.2*cgN))
		VR.PL1.setFrom([0,0.5,0])
		VR.PL2.setFrom([cgr*2,0.5,0])
	
		c = VR.mechanism.addChain(0.02, [VR.PL1, VR.PL2], 'll')
		VR.scene.addChild(c)
	
		VR.PL2.setPickable(0)
		VR.PL1.getConstraint().setRotationConstraint([0,0,1], 'LINE', 0)
		VR.PL1.getConstraint().setTranslationConstraint([0,0.5,0], 'POINT', 0)
		VR.PL1.setColor('green')
	
	if 1: # compound example
		G0 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
		G1 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], False, cgN)
		G2 = addGear(['Gear', 0.02, ar, gp, 16, 0.01, 0], False, int(0.2*cgN))
		G0.setColor('orange')
		G1.setColor('orange')
		G0.setTransform([cgr*2,cgr*3.5,-0.02],[0,0,-1],[0,1,0])
		G1.setTransform([cgr*2,cgr*2,0],[0,0,-1],[0,1,0])
		G2.setTransform([cgr*2,cgr*2,-0.02],[0,0,-1],[0,1,0])
		
		G1.merge(G2)
		G2.destroy()
		
		VR.mechanism.add(G0)
		VR.mechanism.addGear(G1, 0.02, 0.01, 0.02, cgN, 0.01, 0, [0,0,-1])
		VR.mechanism.addGear(G1, 0.02, 0.01, 0.02, 16,  0.01, 0, [0,0,-1], [0,0,-0.02])
		
	
	VR.mechanism.updateNeighbors()
	
	
	# axis prototype
	axis = VR.Geometry('axis')
	axis.setPrimitive('Cylinder 0.3 0.01 32 1 1 1')
	axis.setTransform([cgr*4,0,0.1], [0,1,0], [0,0,1])
	VR.scene.addChild(axis)
	
	#VR.setPhysicsActive(0)
	#aID = VR.kinematics.addBody(axis)
	#p3ID = VR.kinematics.addBody(VR.P3)
	#p8ID = VR.kinematics.addBody(VR.P8)
	#p0 = VR.Pose()
	#p1 = axis.getPoseTo(VR.P3)
	#p2 = axis.getPoseTo(VR.P8)
	#VR.kinematics.addFixedJoint(aID, p3ID, p1, p0)
	#VR.kinematics.addFixedJoint(aID, p8ID, p2, p0)
	#VR.setPhysicsActive(1)
	
	VR.mechanism.addCoaxialConstraint(VR.P3, VR.P8)
	
	
	VR.mechanism.updateVisuals()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="test" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR, string




	#VR.mechanism.updateNeighbors()
	VR.mechanism.updateVisuals()
</core>
      <arg type="VRPyObjectType" value="Headlight" base_name="root" name_space="test" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="update" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'P1') and VR.rotate:
		#print 'rotate P1: 0.01 around [0,0,1]'
		VR.P1.rotate(0.011, [0,0,-1])
		pass
		
	for gear in VR.testChangeComputationGears:
		#gear.rotate(0.02, [0,0,1])
		#gear.rotate(0.02, [1,0,0])
		#gear.rotate(0.02, [1,1,1])
		pass
		
		
	if hasattr(VR, 'mechanism'):
		VR.setPhysicsActive(0)
		VR.mechanism.update()
		VR.setPhysicsActive(1)
		VR.mechanism.updateVisuals()
	
		"""
		if hasattr(VR, 'lf'):
			for o in VR.gears.getChildren():
				if o.changedSince(VR.lf):
					print ' object change detected:', o.getName(), 'at', VR.lf
		"""
		#VR.lf = VR.getFrame()
	
		
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="9" persistency="666"/>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="32" base_name="trigger" name_space="__global__" name_suffix="11" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation persistency="666">
    <presetStates>
      <Orbit>1</Orbit>
    </presetStates>
  </Navigation>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
