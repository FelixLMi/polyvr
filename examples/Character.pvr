<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Character" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="-0.12815 -4.76837e-07 -0.169869" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-3.32152 2.01142 2.89268" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="gridFloor" group="test" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR


	if hasattr(VR, 'floor'): VR.floor.destroy()
	VR.floor = VR.Geometry('floor', 'light')
	
	VR.floor.setPrimitive('Plane 10 10 10 10')
	m = VR.Material('grid')
	m.setLit(0)
	m.setWireFrame(1)
	m.setDiffuse([0,1,1])
	VR.floor.setMaterial(m)
	VR.floor.setOrientation([0,1,0], [0,0,1])
</core>
    </Script>
    <Script base_name="init3" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	VR.makeFloor()
	
	if hasattr(VR, 'character'): VR.character.destroy()
	VR.character = VR.Character('character', 'light')
	VR.character.simpleSetup()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="4" persistency="666"/>
    </Script>
    <Script base_name="initArm" group="test" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	VR.fabrik = VR.FABRIK()
		
	VR.armL = 1.0
	VR.armN = 8
		
	for i in range(VR.armN):
		l = VR.armL/(VR.armN-1)*i
		VR.fabrik.addJoint(i, VR.Pose([0,0,l]))
	
	VR.fabrik.addChain('chain', range(VR.armN))
	
	c = 0.7
	for i in range(VR.armN-1): VR.fabrik.addConstraint(i, [c,c,c,c])
	VR.fabrik.setTarget(VR.armN-1, VR.Pose([0,0,VR.armL]))
	VR.fabrik.iterate()

	# visu
	if not hasattr(VR, 'visu'): VR.visu = VR.Geometry('fabrik', 'light')
	VR.fabrik.visualize(VR.visu)	
	VR.gridFloor()
	
</core>
      <trig type="none" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="6" persistency="666"/>
    </Script>
    <Script base_name="makeFloor" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR



	if hasattr(VR, 'floor'): VR.floor.destroy()
	VR.floor = VR.Geometry('floor', 'light')
	VR.floor.setPrimitive('Box 10 2 10')
	VR.floor.setFrom([0,-1,0])
	VR.floor.setColor('blue')
</core>
    </Script>
    <Script base_name="moveTo" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	from math import sin, cos, pi
	
	class walkCycle:
		def __init__(self, t1, t2, x):
			self.state = 0
			self.t1 = t1
			self.t2 = t2
			self.a = 0
			self.x = x
			self.other = None
			
		def advance(self, d):
			if self.state == 0: # on ground
				self.t1.move(d) # move back
				self.t2.move(d) # move back
			if self.state == 1:
				self.a += d*10 # step arc angle
				tp = self.t1.pos()
				tp[0] = 0
				p0 = [self.x, sin(self.a)*tp.length(), -cos(self.a)*tp.length()]
				self.t1.setPos(p0)
				self.t2.setPos([p0[0], p0[1], p0[2]+0.2])
				#print self.a
				if self.a &gt;= pi:
					self.a = 0
					self.state = 0
					self.other.state = 1
					
		def setStartPositions(self):
			self.t1.setPos([self.x,0,0.2])
			self.t2.setPos([self.x,0,0.4])
		
	class moveParams:
		def __init__(self):
			s = VR.character.getSkeleton()
	
			aL = s.getTarget('ankleL')
			tL = s.getTarget('toesL')
			aR = s.getTarget('ankleR')
			tR = s.getTarget('toesR')
	
			self.leftCycle = walkCycle(aL, tL, 0.2)
			self.rightCycle = walkCycle(aR, tR, -0.2)
			self.leftCycle.other = self.rightCycle
			self.rightCycle.other = self.leftCycle
			self.leftCycle.state = 1
			
			self.leftCycle.setStartPositions()
			self.rightCycle.setStartPositions()
			
	
	def pathWalk(t):
		p = VR.mParams.path.getPose(t)
		p.setDir(-p.dir())
		#print t, p.pos()
		p0 = VR.character.getPose()
		VR.character.setPose(p)
		D = p.pos()-p0.pos()
		d = D.length()
		VR.mParams.leftCycle.advance(d)
		VR.mParams.rightCycle.advance(d)


	def moveTo(p1):
		p0 = VR.character.getPose()
		p0.setDir(-p0.dir().normalized())
		D = p1-p0.pos()
		pm = p0.pos()+D.length()*0.5*p0.dir()
		d = (p1-pm).normalized()
	
		path = VR.Path()
		path.addPoint2(p0)
		path.addPoint(p1, d)
		path.compute(32)
		
		VR.mParams = moveParams()
		VR.mParams.path = path
		

		if hasattr(VR, 'walkPath'): VR.walkPath.destroy()
		VR.walkPath = VR.Stroke('path', 'light')
		VR.walkPath.setPath(path)
		VR.walkPath.strokeProfile([[0,0.1,0]], 0,0,0)
		
		m = VR.Material('mat')
		m.setLineWidth(3)
		VR.walkPath.setMaterial(m)
		
		if hasattr(VR, 'walkAnim'): VR.walkAnim.stop()
		VR.walkAnim = VR.Animation('walkAnim')
		VR.walkAnim.setCallback(pathWalk)
		VR.walkAnim.setDuration(path.getLength()*2)
		VR.walkAnim.start()
		


	if dev.intersect(VR.floor):
		p = dev.getIntersection()
		moveTo(p)
		
	
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="11" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.837095 0.912032 0.323781" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
